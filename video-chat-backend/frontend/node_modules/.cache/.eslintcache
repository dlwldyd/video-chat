[{"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/index.tsx":"1","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/App.tsx":"2","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/Login.tsx":"3","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/FetchMemberInfo.tsx":"4","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/ValidateAuth.tsx":"5","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/home/Home.tsx":"6","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/chatRoom/VideoChat.tsx":"7","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/chatRoom/SearchRoom.tsx":"8","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/exception/handleAxiosException.tsx":"9","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/navigator/Nav.tsx":"10","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/modal/ModalForm.tsx":"11","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/data/data.tsx":"12"},{"size":880,"mtime":1656672439453,"results":"13","hashOfConfig":"14"},{"size":804,"mtime":1655640614351,"results":"15","hashOfConfig":"14"},{"size":2997,"mtime":1656254199731,"results":"16","hashOfConfig":"14"},{"size":1380,"mtime":1655820194349,"results":"17","hashOfConfig":"14"},{"size":353,"mtime":1655640597347,"results":"18","hashOfConfig":"14"},{"size":384,"mtime":1654438797041,"results":"19","hashOfConfig":"14"},{"size":14914,"mtime":1656484069828,"results":"20","hashOfConfig":"14"},{"size":11656,"mtime":1655820645702,"results":"21","hashOfConfig":"14"},{"size":480,"mtime":1655561319879,"results":"22","hashOfConfig":"14"},{"size":8630,"mtime":1656421421800,"results":"23","hashOfConfig":"14"},{"size":1289,"mtime":1655622279974,"results":"24","hashOfConfig":"14"},{"size":82,"mtime":1656421158913,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hm6jr4",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/index.tsx",[],[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/App.tsx",["69"],[],"import Login from './Auth/Login';\nimport Home from './home/Home';\nimport FetchMemberInfo from './Auth/FetchMemberInfo';\nimport VideoChat from './chatRoom/VideoChat';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport SearchRoom from './chatRoom/SearchRoom';\nimport ValidateAuth from './Auth/ValidateAuth';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home/>} />\n        <Route path='/login' element={<Login/>} />\n        <Route path='/fetch' element={<FetchMemberInfo/>} />\n        <Route path='/video-chat' element={<ValidateAuth element={<VideoChat />} />} />\n        <Route path='/search' element={<ValidateAuth element={<SearchRoom />} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n",[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/Login.tsx",["70"],[],"import axios, { AxiosError } from \"axios\";\nimport { useNavigate } from \"react-router\";\nimport styled from \"styled-components\";\nimport myData from \"../data/data\";\nimport handleAxiosException from \"../exception/handleAxiosException\";\n\nconst LoginContainer = styled.div`\n    width: 100%;\n    height: 980px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-family: ${props => props.theme.font};\n`\n\nconst LoginBox = styled.div`\n    width: 600px;\n    height: 500px;\n    background-color: ${props => props.theme.color.bgColor};\n    border: 5px solid #e6d5d5;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`\n\nconst GoogleLogin = styled.img`\n    width: 400px;\n    height: 100px;\n`\n\nconst NaverLogin = styled.img`\n    width: 390px;\n    height: 90px;\n`\n\nconst NoLogin = styled.button`\n    all: unset;\n    font-family: ${props => props.theme.font};\n    font-size: 30px;\n    width: 390px;\n    height: 90px;\n    border-radius: 6px;\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: black;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst Head = styled.div`\n    font-size: 80px;\n    margin-bottom: 30px;    \n`\n\nfunction Login() {\n\n    const navigate = useNavigate();\n\n    const publicUrl = process.env.PUBLIC_URL;\n\n    const onClick = async () => {\n        try{\n            const { username, password } = await (await axios.get(`${myData.domain}/tmp/member`)).data;\n            const form = new FormData();\n            form.append(\"username\", username);\n            form.append(\"password\", password);\n            const status = (await axios.post(`${myData.domain}/login`, form)).status;\n            if(status === 200) {\n                navigate(\"/fetch\");\n            }\n        } catch(err: unknown | AxiosError) {\n            handleAxiosException(err);\n            navigate(\"/\");\n        }\n    }\n\n    return (\n        <LoginContainer>\n            <LoginBox>\n                <Head>로그인</Head>\n                <a href={`${myData.domain}/oauth2/authorization/google`}>\n                    <GoogleLogin src={`${publicUrl}/web/2x/btn_google_signin_light_normal_web@2x.png`} alt=\"\"></GoogleLogin>\n                </a>\n                <a href={`${myData.domain}/oauth2/authorization/naver`}>\n                    <NaverLogin src={`${publicUrl}/2021_Login_with_naver_guidelines_En/btnG_official.png`} alt=\"\"></NaverLogin>\n                </a>\n                <NoLogin onClick={onClick}>로그인 없이 체험하기</NoLogin>\n            </LoginBox>\n            {/* <div>\n                <form action=\"/login\" method=\"post\">\n                    <input type=\"text\" placeholder=\"아이디\" name=\"username\"/>\n                    <input type=\"password\" placeholder=\"비밀번호\" name=\"password\"/>\n                    <input type=\"submit\" value=\"로그인\"/>\n                </form>\n            </div> */}\n        </LoginContainer>\n    );\n}\n\nexport default Login;","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/FetchMemberInfo.tsx",["71"],[],"import axios, { AxiosError } from \"axios\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport styled from \"styled-components\";\nimport myData from \"../data/data\";\nimport handleAxiosException from \"../exception/handleAxiosException\";\n\nconst Box = styled.div`\n    width: 100%;\n    height: 98vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Loading = styled.div`\n    font-size: 100px;\n    font-family: ${props => props.theme.font};;\n`\n\nfunction FetchMemberInfo() {\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const getMemberInfo = async () => {\n            const json = await (await axios.get(`${myData.domain}/api/memberInfo`, {\n                withCredentials: true\n            })).data;\n            sessionStorage.setItem(\"authenticated\", json.authenticated);\n            if(json.authenticated) {\n                sessionStorage.setItem(\"username\", json.username);\n                sessionStorage.setItem(\"nickname\", json.nickname);\n            }\n            navigate(\"/\", {replace: true});\n        }\n        try {\n            getMemberInfo();\n        } catch(err: unknown | AxiosError) {\n            handleAxiosException(err);\n        }\n    }, [navigate]);\n\n    return (\n        <Box>\n            <Loading>로그인 중..</Loading>\n        </Box>\n    )\n}\nexport default FetchMemberInfo;","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/Auth/ValidateAuth.tsx",[],[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/home/Home.tsx",[],[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/chatRoom/VideoChat.tsx",["72"],[],"import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport { FaRegPaperPlane } from \"react-icons/fa\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport axios, { AxiosError } from \"axios\";\nimport handleAxiosException from \"../exception/handleAxiosException\";\nimport myData from \"../data/data\";\n\nconst InputPanel = styled.div`\n    position: sticky;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 60px;    \n    background-color: ${props => props.theme.color.bgColor};\n    border-top: 2px solid #e6d5d5;\n    padding-left: 20px;\n    padding-right: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-shrink: 0;\n`\n\nconst InputBox = styled.div`\n    height: 50px;\n    background-color: ${props => props.theme.color.bgColor};\n    display: flex;\n    padding: 0px 10px;\n    align-items: center;\n    flex-grow: 1;\n    font-size: 15px;\n    &:hover {\n        cursor: text;\n    }\n`\n\nconst InputChat = styled.textarea`\n    resize: none;\n    width: 100%;\n    color: ${props => props.theme.color.textColor};\n    background-color: ${props => props.theme.color.bgColor};\n    border: none;\n    overflow: hidden;\n    vertical-align: middle;\n    font-size: inherit;\n    border-bottom: 1px solid ${props => props.theme.color.borderColor};\n    &:focus {\n        outline: none;\n        border-bottom: 2px solid ${props => props.theme.color.borderColor};\n    }\n`\n\nconst SendChatBtn = styled.button`\n    height: 40px;\n    width: 40px;\n    margin-left: 10px;\n    background-color: ${props => props.theme.color.bgColor};\n    color: ${props => props.theme.color.textColor};\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: none;\n    &:active {\n        background-color: ${props => props.theme.color.clickColor};\n    }\n    &:not(:active) {\n        transition: background-color 0.3s ease-out;\n    }\n`\n\nconst MessageBox = styled.div`\n    margin-left: 15px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n`\n\nconst Message = styled.span`\n    font-family: ${props => props.theme.font};\n    color: ${props => props.theme.color.textColor};\n    font-size: 14px;\n`\n\nconst ChatLog = styled.div`\n    overflow: auto;    \n`\n\nconst Video = styled.video.attrs({autoPlay: true, playsInline: true, width: 640, height: 320})`\n    width: 100%;\n    height: 100%;\n`\n\nconst Msg = styled.div`\n    position: fixed;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    border-left: 4px solid #e6d5d5;\n    width: 460px;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: whitesmoke;\n`\n\nconst VideoGrid = styled.div`\n    height: 980px;\n    width: 1400px;\n    justify-content: center;\n    display: grid;\n    grid-template-columns: repeat(3, 400px);\n    grid-auto-rows: 320px;\n    gap: 3px;\n    padding-right: 460px;\n    padding-top: 10px;\n`\n\nconst Stream = styled.div`\n    background-color: black;\n`\n\nfunction VideoChat() {\n\n    const videoEl = useRef<HTMLVideoElement>(null);\n\n    const {state: roomKey} = useLocation();\n\n    const stomp = useRef<Stomp.Client>();\n    \n    const inputChat = useRef<HTMLTextAreaElement>(null);\n    \n    const [receivedMsg, setReceivedMsg] = useState<string[]>([]);\n\n    const [remoteStreams, setRemoteStreams] = useState<Map<string, MediaStream | null>>(new Map<string, MediaStream | null>());\n\n    const [remoteVideos, setRemoteVideos] = useState<JSX.Element[]>([]);\n    \n    const [msg, setMsg] = useState(\"\");\n\n    const chatLog = useRef<HTMLDivElement>(null);\n\n    const localStream = useRef<MediaStream>();\n\n    const nickname = sessionStorage.getItem(\"nickname\");\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n\n        const from = sessionStorage.getItem(\"username\");\n\n        const myPeerConnections = new Map<string, RTCPeerConnection>();\n\n        const peerConnectionConfig = {\n            'iceServers': [\n                {'urls': 'stun:stun.stunprotocol.org:3478'},\n                {'urls': 'stun:stun.l.google.com:19302'},\n            ]\n        };\n\n        const uuid = () => {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\n                return v.toString(16);\n            });\n        }\n            \n        const handleStompConnection = () => {\n            const sessionId = uuid();\n            const ws = new SockJS(`${myData.domain}/stomp`, [], {\n                sessionId: () => {\n                    return sessionId;\n                },\n            });\n            stomp.current = Stomp.over(ws);\n            stomp.current.heartbeat.outgoing = 1000;\n            stomp.current.heartbeat.incoming = 0;\n            stomp.current.connect({}, () => {\n                enterRoom(sessionId);\n                stomp.current?.subscribe(`/exchange/chat.exchange/room.${roomKey}`, (message) => {\n                    const json = JSON.parse(message.body);\n                    if(json.type === \"message\") {\n                        setReceivedMsg(receivedMsg => [...receivedMsg, `${json.nickname} : ${json.msg}`]);\n                    } else if(json.type === \"join\") {\n                        if(json.from !== from) {\n                            setRemoteStreams(remoteStreams => {\n                                const updated = new Map<string, MediaStream | null>(remoteStreams);\n                                updated.set(json.streamId, null);\n                                return updated;\n                            });\n                            makeOffer(json.from);\n                        }\n                    } else if(json.type === \"offer\") {\n                        if(from === json.target) {\n                            setRemoteStreams(remoteStreams => {\n                                const updated = new Map<string, MediaStream | null>(remoteStreams);\n                                updated.set(json.streamId, null);\n                                return updated;\n                            });\n                            makeAnswer(json.from, json.sdp);\n                        }\n                    } else if(json.type === \"answer\") {\n                        if(from === json.target) {\n                            myPeerConnections.get(json.from)?.setRemoteDescription(json.sdp);\n                        }\n                    } else if(json.type === \"ice\") {\n                        if(from === json.target) {\n                            myPeerConnections.get(json.from)?.addIceCandidate(json.iceCandidate);\n                        }\n                    } else if(json.type === \"leave\") {\n                        const myPeerConnection = myPeerConnections.get(json.from);\n                        if(myPeerConnection) {\n                            disconnect(myPeerConnection);\n                        }\n                        setRemoteStreams(remoteStreams => {\n                            const updated = new Map<string, MediaStream | null>(remoteStreams);\n                            updated.delete(json.streamId);\n                            return updated;\n                        })\n                    }\n                });\n                videoConn();\n            })\n        };\n    \n\n        const enterRoom = (sessionId: string) => {\n            try {\n                axios.post(`${myData.domain}/api/joinRoom`, {\n                    roomKey,\n                    sessionId,\n                }, {\n                    withCredentials: true,\n                });\n            } catch(err: unknown | AxiosError) {\n                handleAxiosException(err);\n                navigate(\"/\");\n            }\n        }\n\n        const videoConn = async () => {\n            try{\n                if(!videoEl.current) {\n                    alert(\"비디오를 불러오는데 실패했습니다.\");\n                    window.location.replace(\"/\");\n                    return;\n                }\n                localStream.current = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: {\n                        facingMode: \"user\"\n                    },\n                });\n                videoEl.current.srcObject = localStream.current;\n                stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"join\", from, nickname, roomKey, streamId: localStream.current.id}));\n            } catch(err: any) {\n                console.log(err);\n                if(!videoEl.current) {\n                    alert(\"비디오를 불러오는데 실패했습니다.\");\n                    window.location.replace(\"/\");\n                    return;\n                }\n                localStream.current = new MediaStream();\n                videoEl.current.srcObject = localStream.current;\n                stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"join\", from, nickname, roomKey, streamId: localStream.current.id}));\n            }\n        }\n\n        const makeAnswer = async (target: string, receivedOffer: RTCSessionDescriptionInit) => {\n            const newPeerConnection = createPeerConnection(target);\n            if(!newPeerConnection) {\n                return;\n            }\n            await newPeerConnection.setRemoteDescription(receivedOffer);\n            const answer = await newPeerConnection.createAnswer();\n            await newPeerConnection.setLocalDescription(answer);\n            stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"answer\", from, target, sdp: newPeerConnection.localDescription}));\n        }\n\n        const createPeerConnection = (target: string) => {\n            if(!localStream.current) {\n                console.log(\"no media\");\n                return null;\n            }\n            const newPeerConnection = new RTCPeerConnection(peerConnectionConfig);\n            myPeerConnections.set(target, newPeerConnection);\n            newPeerConnection.onicecandidate = (data) => {\n                stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"ice\", from, target, iceCandidate: data.candidate}));\n            }\n            newPeerConnection.ontrack = handleTrack;\n            localStream.current.getTracks().forEach(track => {\n                if(!localStream.current) {\n                    console.log(\"no media\");\n                    return;\n                }\n                newPeerConnection.addTrack(track, localStream.current);\n            });\n            return newPeerConnection;\n        }\n\n        const makeOffer = async (target: string) => {\n            const newPeerConnection = createPeerConnection(target);\n            if(!newPeerConnection) {\n                return;\n            }\n            if(localStream.current?.getTracks().length === 0) {\n                const offer = await newPeerConnection.createOffer({offerToReceiveAudio: true, offerToReceiveVideo: true});\n                await newPeerConnection.setLocalDescription(offer);\n                stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"offer\", from, target, streamId: localStream.current.id, sdp: newPeerConnection.localDescription})); \n            } else {\n                newPeerConnection.onnegotiationneeded = async () => {\n                    const offer = await newPeerConnection.createOffer();\n                    await newPeerConnection.setLocalDescription(offer);\n                    stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"offer\", from, target, streamId: localStream.current?.id, sdp: newPeerConnection.localDescription})); \n                }\n            }\n        }\n\n        const handleTrack = (data: RTCTrackEvent) => {\n            setRemoteStreams(remoteStreams => {\n                const updated = new Map<string, MediaStream | null>(remoteStreams);\n                updated.set(data.streams[0].id, data.streams[0]);\n                return updated;\n            });\n        }\n\n        const disconnect = (peerConnection: RTCPeerConnection) => {\n            peerConnection.onicecandidate = null;\n            peerConnection.ontrack = null;\n            peerConnection.onnegotiationneeded = null;\n            peerConnection.close();\n        }\n\n        const leave = () => {\n            stomp.current?.disconnect(() => {\n                myPeerConnections.forEach(myPeerConnection => disconnect(myPeerConnection));\n                localStream.current?.getTracks().forEach(track => {\n                    track.stop();\n                });\n            });\n        };\n\n        handleStompConnection();\n\n        return leave;\n\n    }, [roomKey, nickname, navigate]);\n    \n    useEffect(() => {\n        if(chatLog.current) {\n            chatLog.current.scrollTop = chatLog.current.scrollHeight;\n        }\n    }, [receivedMsg]);\n\n    useEffect(() => {\n        setRemoteVideos(remoteVideos => Array.from(remoteStreams.values()).map((remoteStream, idx) => \n            <Stream key={idx}>\n                <Video ref={video => {\n                    if(video) {\n                        video.srcObject = remoteStream;\n                    }\n                }} />\n            </Stream>\n        ))\n    }, [remoteStreams]);\n    \n    const onEnter = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if(event.key === \"Enter\") {\n            event.preventDefault();\n            stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"message\", nickname, msg}));\n            setMsg(\"\");\n        }\n    }\n    \n    const onChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setMsg(msg => event.target.value);\n    }\n    \n    const onBtnClick = () => {\n        stomp.current?.send(`/chat/room.${roomKey}`, {}, JSON.stringify({type: \"message\", nickname, msg}));\n        setMsg(\"\");\n    }\n    \n    const onInputBoxClick = () => {\n        inputChat.current?.focus();\n    }\n\n    return (\n        <div>\n            <VideoGrid>\n                <Stream>\n                    <Video ref={videoEl} />\n                </Stream>\n                {remoteVideos}\n            </VideoGrid>\n            <Msg>\n                <ChatLog ref={chatLog}>\n                    {receivedMsg.map((msg, idx) => \n                    <MessageBox key={idx}>\n                        <Message>{msg}</Message>\n                    </MessageBox>)}\n                </ChatLog>\n                <InputPanel>\n                    <InputBox onClick={onInputBoxClick}>\n                        <InputChat rows={1} placeholder=\"메세지를 입력해 주세요\" maxLength={100} required onKeyDown={onEnter} onChange={onChange} value={msg} ref={inputChat}/>\n                    </InputBox>\n                    <SendChatBtn onClick={onBtnClick}><FaRegPaperPlane/></SendChatBtn>\n                </InputPanel>\n            </Msg>\n        </div>\n    );\n}\n\nexport default VideoChat;","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/chatRoom/SearchRoom.tsx",["73"],[],"import axios, { AxiosError } from \"axios\";\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Nav from \"../navigator/Nav\";\nimport { FaLock, FaAngleLeft, FaAngleRight, FaSearch } from \"react-icons/fa\";\nimport { useNavigate } from 'react-router';\nimport queryString from 'query-string';\nimport { Link } from \"react-router-dom\";\nimport ModalForm from \"../modal/ModalForm\";\nimport handleAxiosException from \"../exception/handleAxiosException\";\nimport myData from \"../data/data\";\n\nconst Container = styled.div`\n    font-family: ${props => props.theme.font};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 1000px;\n    flex-direction: column;\n`\n\nconst Table = styled.table`\n    width: 1200px;\n    border-spacing: 0;\n`\n\nconst Thead = styled.thead`\n    font-size: larger;\n    height: 40px;\n    background-color: ${props => props.theme.color.tableBgColor};\n`\n\nconst ThRoomName = styled.th`\n    border-bottom: 1px solid ${props => props.theme.color.tableBorderColor};\n    border-top: 1px solid  ${props => props.theme.color.tableBorderColor};\n`\n\nconst ThNumber = styled.th`\n    border-bottom: 1px solid ${props => props.theme.color.tableBorderColor};\n    border-top: 1px solid  ${props => props.theme.color.tableBorderColor};\n`\n\nconst Tr = styled.tr`\n    font-size: large;\n    height: 40px;\n    &:hover {\n        background-color: ${props => props.theme.color.tableBgColor};\n    }\n`\n\nconst TdRoomName = styled.td`\n    border-bottom: 1px solid ${props => props.theme.color.tableBorderColor};\n`\n\nconst TdNumber = styled.td`\n    width: 120px;\n    text-align: center;\n    border-bottom: 1px solid ${props => props.theme.color.tableBorderColor};\n`\n\nconst Room = styled.span`\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst Pagination = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin-top: 60px;\n`\n\nconst Page = styled.div`\n    border: 1px solid ${props => props.theme.color.tableBorderColor};\n    border-radius: 50px;\n    background-color: white;\n    display: flex;\n    justify-content: space-around;\n    margin-left: 30px;\n    margin-right: 30px;\n`\n\nconst PageNum = styled(Link)`\n    all: unset;\n    border-radius: 50px;\n    background-color: white;\n    padding-left: 15px;\n    padding-right: 15px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 15px;\n    color: #969595;\n    &:hover {\n        cursor: pointer;\n        background-color: ${props => props.theme.color.tableBorderColor};\n    }\n`\n\nconst Angle = styled(Link)`\n    all: unset;\n    border-radius: 50%;\n    background-color: white;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: 1px solid ${props => props.theme.color.tableBorderColor};\n    &:hover {\n        cursor: pointer;\n        background-color: ${props => props.theme.color.tableBorderColor};\n    }\n`\n\nconst ModalContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    font-family: ${props => props.theme.font};    \n    flex-direction: column;\n    justify-content: space-around;\n    align-items: flex-end;\n`\n\nconst Label = styled.label`\n    width: 380px;\n    font-size: larger;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst InputText = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\nconst Input = styled.input`\n    width: 380px;\n    height: 38px;\n    border-radius: 5px;\n    border: 1px solid ${props => props.theme.color.borderColor};\n    margin-top: 10px;\n    margin-bottom: 10px;\n    font-size: 17px;\n    &:focus {\n        border: 3px solid #458588;\n        margin-top: 8px;\n        margin-bottom: 8px;\n    }\n`\n\nconst SearchBtn = styled.button`\n    all: unset;\n    border-radius: 10px;\n    background-color: ${props => props.theme.color.btnColor};\n    color: white;\n    font-size: 20px;\n    margin-right: 45px;\n    padding: 5px 20px;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst SearchModalBtn = styled.div`\n    width: 80px;\n    height: 80px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\ninterface ClickEvent extends React.MouseEvent<HTMLSpanElement> {\n    target: HTMLSpanElement;\n}\n\nfunction SearchRoom() {\n\n    const [rooms, setRooms] = useState<{roomId: number, roomName: string, locked: boolean, count: number}[]>([]);\n\n    const [totalPages, setTotalPages] = useState<number>(0);\n\n    const [currentPage, setCurrentPage] = useState<number>(0);\n\n    const [pageList, setPageList] = useState<number[]>([]);\n\n    const navigate = useNavigate();\n\n    const {page, roomName} = queryString.parse(window.location.search);\n\n    const [searchOpen, setSearchOpen] = useState(false);\n\n    const [pwOpen, setPwOpen] = useState(false);\n\n    const [searchRoomName, setSearchRoomName] = useState(\"\");\n\n    const [roomPassword, setRoomPassword] = useState(\"\");    \n\n    const roomId = useRef<string | null>(\"\");\n\n    const getRoomKey = async (roomId: string | null) => {\n        try {\n            const {roomKey} = await (await axios.post(`${myData.domain}/api/getRoomKey`, {\n                roomId,\n                password: roomPassword\n            }, {\n                withCredentials: true\n            })).data;\n            navigate(`/video-chat`, {state: roomKey});\n        } catch(err: unknown | AxiosError) {\n            handleAxiosException(err);\n        }\n        \n    }\n\n    const onClick = (event: ClickEvent) => {\n        \n        getRoomKey(event.target.getAttribute(\"data-roomid\"));\n    }\n\n    const onClickLocked = (event: ClickEvent) => {\n        roomId.current = event.target.getAttribute(\"data-roomid\");\n        setPwOpen(pwOpen => true);\n    }\n\n    const onSearchOpen = () => {\n        setSearchOpen(searchOpen => true);\n    }\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchRoomName(searchRoom => event.target.value);\n    }\n\n    const onChangePw = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRoomPassword(roomPassword => event.target.value);\n    }\n\n    const onSearch = () => {\n        navigate(`/search?roomName=${searchRoomName}`);\n        setSearchOpen(searchOpen => false);\n    }\n\n    const onEnterFS = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === \"Enter\") {\n            navigate(`/search?roomName=${searchRoomName}`);\n            setSearchOpen(searchOpen => false);\n        }\n    }\n\n    const onEnterFP = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === \"Enter\") {\n            getRoomKey(roomId.current);\n        }\n    }\n    \n\n    const onPwInput = () => {\n        getRoomKey(roomId.current);\n    }\n\n    const searchModal = (\n        <ModalContainer>\n            <InputText>\n                <Label htmlFor=\"search\">방 이름</Label>\n                <Input value={searchRoomName} id=\"search\" onChange={onChange} onKeyDown={onEnterFS} />\n            </InputText>\n            <SearchBtn onClick={onSearch}>검색</SearchBtn>\n        </ModalContainer>\n    );\n\n    const passwordModal = (\n        <ModalContainer>\n            <InputText>\n                <Label htmlFor=\"room-pw\">패스워드</Label>\n                <Input type=\"password\" value={roomPassword} id=\"room-pw\" onChange={onChangePw} onKeyDown={onEnterFP} />\n            </InputText>\n            <SearchBtn onClick={onPwInput}>입력</SearchBtn>\n        </ModalContainer>\n    );\n\n    useEffect(() => {\n\n        let beginPage = 1;\n\n        const getRoomInfo = async () => {\n            const json = await (\n                roomName ? \n                    await axios.get(`${myData.domain}/api/roomInfo?page=${page}&roomName=${roomName}`, {\n                        withCredentials: true\n                    }) : \n                    await axios.get(`${myData.domain}/api/roomInfo?page=${page}`, {\n                        withCredentials: true\n                    })\n            ).data;\n            setRooms(rooms => [...json.content]);\n            setCurrentPage(currentPage => json.pageable.pageNumber+1);\n            setTotalPages(totalPages => json.totalPages);\n            const begin = Math.floor(json.pageable.pageNumber/10)*10+1;\n            if(begin !== beginPage) {\n                beginPage = begin;\n                const arr: number[] = [];\n                for (let i = 0; i < Math.min(10, json.totalPages-begin+1); i++) {\n                    arr.push(begin+i);\n                }\n                setPageList(pageList => [...arr]);\n            }\n        }\n\n        getRoomInfo();\n\n    }, [page, roomName]);\n\n    return (\n        <Container>\n            <Nav />\n            <ModalForm isOpen={searchOpen} setIsOpen={setSearchOpen} content={searchModal}></ModalForm>\n            <ModalForm isOpen={pwOpen} setIsOpen={setPwOpen} content={passwordModal}></ModalForm>\n            <div>\n                <SearchModalBtn onClick={onSearchOpen}><FaSearch /></SearchModalBtn>\n                <Table>\n                    <Thead>\n                        <Tr>\n                            <ThRoomName>방 이름</ThRoomName>\n                            <ThNumber>인원</ThNumber>\n                        </Tr>\n                    </Thead>\n                    <tbody>\n                        {rooms.map((room, idx) => \n                        <Tr key={idx}>\n                                <TdRoomName><Room data-roomid={room.roomId} data-roomname={room.roomName} onClick={room.locked ? onClickLocked : onClick}>{room.roomName} {room.locked ? <FaLock /> : null}</Room></TdRoomName>\n                            <TdNumber>{room.count}/9</TdNumber>\n                        </Tr>)}\n                    </tbody>\n                </Table>            \n            </div>\n            <Pagination>\n                {currentPage > 10 ? \n                    <Angle to={roomName ? \n                        `/search?page=${Math.floor((currentPage-1)/10)*10-1}&roomName=${roomName}` : \n                        `/search?page=${Math.floor((currentPage-1)/10)*10-1}`}>\n                    <FaAngleLeft />\n                    </Angle> : \n                    null}\n                <Page>\n                    {pageList.map((page, idx) => \n                    currentPage === page ? \n                        <PageNum \n                            key={idx} \n                            to={roomName ? \n                                `/search?page=${page-1}&roomName=${roomName}` :\n                                `/search?page=${page-1}`}\n                            style={{\n                                \"backgroundColor\" : \"#261a31\", \n                                \"color\": \"white\"}}>\n                        {page}\n                        </PageNum> : \n                        <PageNum \n                            key={idx} \n                            to={roomName ? \n                                `/search?page=${page-1}&roomName=${roomName}` :\n                                `/search?page=${page-1}`}>\n                        {page}\n                        </PageNum>\n                        )}\n                </Page>\n                {currentPage <= Math.floor((totalPages-1)/10)*10 ? \n                    <Angle \n                        to={roomName ? \n                            `/search?page=${Math.ceil(currentPage/10)*10}&roomName=${roomName}` : \n                            `/search?page=${Math.ceil(currentPage/10)*10}`}>\n                    <FaAngleRight />\n                    </Angle> : \n                    null}\n            </Pagination>\n        </Container>\n    );\n}\n\nexport default SearchRoom;","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/exception/handleAxiosException.tsx",[],[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/navigator/Nav.tsx",["74"],[],"import axios, { AxiosError } from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useState } from 'react';\nimport ModalForm from \"../modal/ModalForm\";\nimport { useNavigate } from \"react-router\";\nimport { FaUserEdit } from \"react-icons/fa\";\nimport handleAxiosException from \"../exception/handleAxiosException\";\nimport myData from \"../data/data\";\n\nconst LeftButtonSet = styled.div`\n    display: flex;\n    width: 320px;\n    justify-content: space-between;\n    align-items: center;\n`\n\nconst RightButtonSet = styled.div`\n    display: flex;\n    width: 100px;\n    justify-content: space-between;\n    align-items: flex-end;\n`\n\nconst NavContainer = styled.nav`\n    position: fixed;\n    height: 60px;\n    left: 0%;\n    right: 0%;\n    top: 0%;\n    background-color: ${props => props.theme.color.navColor};\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    box-shadow: 0px 1px 2px 0.5px #d5c4a1;\n`\n\nconst HomeButton = styled(Link)`\n    font-family: ${props => props.theme.font};;\n    color: ${props => props.theme.color.navTextColor};\n    font-size: 30px;\n    font-weight: bolder;\n    text-decoration: none;\n    margin-right: 35px;\n`\n\nconst LoginButton = styled(Link)`\n    font-family: ${props => props.theme.font};\n    color: ${props => props.theme.color.navTextColor};\n    font-size: 20px;\n    font-weight: normal;\n    text-decoration: none;\n`\n\nconst CreateChatRoom = styled.button`\n    all: unset;\n    font-family: ${props => props.theme.font};\n    font-weight: normal;\n    font-size: 17px;\n    color: #a89984;\n    &:hover {\n        color: #fb4934;\n        cursor: pointer;\n    }\n`\n\nconst SearchChat = styled(Link)`\n    all: unset;\n    font-family: ${props => props.theme.font};\n    font-weight: normal;\n    font-size: 17px;\n    color: #a89984;\n    &:hover {\n        color: #fb4934;\n        cursor: pointer;\n    }\n`\n\nconst LogoutButton = styled(Link)`\n    text-decoration: none;\n    font-family: ${props => props.theme.font};\n    color: ${props => props.theme.color.navTextColor};\n    font-size: 20px;\n    font-weight: normal;\n`\n\nconst ModalContainer = styled.form`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    font-family: ${props => props.theme.font};\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: flex-end;\n`\n\nconst InputSet = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n`\n\nconst Label = styled.label`\n    width: 380px;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst Input = styled.input`\n    width: 380px;\n    height: 38px;\n    border-radius: 5px;\n    border: 1px solid ${props => props.theme.color.borderColor};\n    margin-top: 10px;\n    margin-bottom: 10px;\n    font-size: 17px;\n    &:focus {\n        border: 3px solid #458588;\n        margin-top: 8px;\n        margin-bottom: 8px;\n    }\n`\n\nconst Btn = styled.button`\n    all: unset;\n    border-radius: 10px;\n    background-color: ${props => props.theme.color.btnColor};\n    color: white;\n    font-size: 20px;\n    margin-right: 45px;\n    padding: 5px 20px;\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst NickNameEdit = styled.div`\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nfunction Nav() {\n\n    const [loginState, setLoginState] = useState(sessionStorage.getItem(\"authenticated\") === \"true\");\n\n    const [createRoomOpen, setCreateRoomOpen] = useState(false);\n\n    const [editNicknameOpen, setEditNicknameOpen] = useState(false);\n\n    const [roomName, setRoomName] = useState(\"\");\n\n    const [password, setPassword] = useState(\"\");\n\n    const [nickname, setNickname] = useState(\"\");\n\n    const [curNickname, setCurNickname] = useState(sessionStorage.getItem(\"nickname\"));\n\n    const navigate = useNavigate();\n\n    const onLogout = () => {\n        const logout = async () => {\n            try {\n                await axios.get(`${myData.domain}/logout`, {\n                    withCredentials: true\n                });\n                sessionStorage.setItem(\"authenticated\", \"false\");\n                sessionStorage.removeItem(\"nickname\");\n                sessionStorage.removeItem(\"email\");\n                sessionStorage.removeItem(\"username\");\n                setLoginState(loginState => false);\n                navigate(\"/\", {replace: true});\n            } catch(err: unknown | AxiosError) {\n                handleAxiosException(err);\n            }\n        }\n        logout();        \n    }\n\n    const onClick = () => {\n        if(!loginState) {\n            navigate(\"/login\");\n        }\n        setCreateRoomOpen(modalOpen => true);\n    }\n\n    const onOpen = () => {\n        if(!loginState) {\n            navigate(\"/login\");\n        }\n        setEditNicknameOpen(editNicknameOpen => true);\n    }\n\n    const onSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if(roomName === \"\") {\n            alert(\"방 이름을 입력해주세요\");\n        } else {\n            getRoomKey();\n        }\n    }\n\n    const onRoomNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRoomName(roomName => event.target.value);\n    }\n\n    const onNickNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNickname(nickname => event.target.value);\n    }\n\n    const onPassChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(password => event.target.value);\n    }\n\n    const getRoomKey = async () => {\n        try {\n            const { roomKey } = await (await axios.post(`${myData.domain}/api/createRoom`, {\n                roomName,\n                password,\n            }, {\n                withCredentials: true,\n            })).data;                   \n            navigate(`/video-chat`, {state: roomKey});\n        } catch(err: unknown | AxiosError) {\n            handleAxiosException(err);\n        }\n    }\n    \n    const changeNickname = async () => {\n        try {\n            await axios.get(`${myData.domain}/api/changeNickname?nickname=${nickname}`, {\n                withCredentials: true,\n            });\n            sessionStorage.setItem(\"nickname\", nickname);\n            setCurNickname(nickname => sessionStorage.getItem(\"nickname\"));\n            setEditNicknameOpen(editNicknameOpen => false);\n            setNickname(nickname => \"\");\n        } catch(err: unknown | AxiosError) {\n            handleAxiosException(err);\n        }\n    }\n\n    const onEdit = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n        if(nickname === \"\") {\n            alert(\"닉네임을 입력해주세요\");\n        } else {\n            changeNickname();\n        }\n    }\n\n    const createModal = (\n        <ModalContainer action={`${myData.domain}/api/createRoom`} method=\"POST\" onSubmit={onSubmit}>\n            <InputSet>\n                <Label htmlFor=\"roomName\">방 이름</Label>\n                <Input id=\"roomName\" value={roomName} onChange={onRoomNameChange} />\n                <Label htmlFor=\"password\">비밀번호(선택)</Label>\n                <Input id=\"password\" type=\"password\" value={password} onChange={onPassChange} />\n            </InputSet>\n            <Btn type=\"submit\">만들기</Btn>\n        </ModalContainer>\n    );\n\n    const editModal = (\n        <ModalContainer>\n            <InputSet>\n                <Label htmlFor=\"nickname\">현재 닉네임 : {curNickname}</Label>\n                <Input placeholder=\"변경할 닉네임을 입력해주세요\" value={nickname} id=\"nickname\" onChange={onNickNameChange} />\n            </InputSet>\n            <Btn onClick={onEdit}>변경</Btn>\n        </ModalContainer>\n    )\n\n    return (\n        <div>\n            <NavContainer>\n                <LeftButtonSet>\n                    <HomeButton to=\"/\">VChat</HomeButton>\n                    <CreateChatRoom onClick={onClick}>채팅방 생성</CreateChatRoom>\n                    <SearchChat to=\"/search\">채팅참여</SearchChat>\n                </LeftButtonSet>\n                <RightButtonSet>\n                    {loginState ? <NickNameEdit onClick={onOpen}><FaUserEdit color=\"white\" size=\"17px\"/></NickNameEdit> : null}                    \n                    {loginState ? <LogoutButton onClick={onLogout} to=\"/\">Logout</LogoutButton> : <LoginButton to=\"/login\">Login</LoginButton>}\n                </RightButtonSet>\n            </NavContainer>\n            <ModalForm isOpen={createRoomOpen} setIsOpen={setCreateRoomOpen} content={createModal}></ModalForm>\n            <ModalForm isOpen={editNicknameOpen} setIsOpen={setEditNicknameOpen} content={editModal}></ModalForm>\n        </div>\n    );\n}\n\nexport default Nav","/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/modal/ModalForm.tsx",[],[],"/home/dlwldyd/project/video_chat/video-chat-backend/frontend/src/data/data.tsx",[],[],{"ruleId":"75","severity":1,"message":"76","line":9,"column":3,"nodeType":"77","messageId":"78","endLine":9,"endColumn":11},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":27},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":27},{"ruleId":"75","severity":1,"message":"79","line":7,"column":17,"nodeType":"77","messageId":"78","endLine":7,"endColumn":27},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":27},{"ruleId":"75","severity":1,"message":"79","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":27},"@typescript-eslint/no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'AxiosError' is defined but never used."]